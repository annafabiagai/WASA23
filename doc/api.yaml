openapi: 3.0.0

info:
  title : WASAphoto 
  description: |
    WASAphoto: uploading and sharing photos with your friends. API made by 1982464 .
  version : 0.0.1

tags:
  - name: login
    description: user log in into an alredy existing profile or into a new one.
  - name: set
    description: setting a new nickname   
  - name: user 
    description: all the operations referring to the user. 
  - name: ban
    description: actions relative at the ban section. 
  - name: following 
    description: actions relative to follow a user or to be followed by a user.
  - name: list 
    description: list of some collections.
  - name: home page 
    description: home feed of a user.
  - name: photo
    description: all actions relatives to photo section.
  - name: comment
    description: relative to comment section.
  - name: like
    description: actions relative to like section. 
  




paths:

  /session: 

    post:
      operationId: doLogin 
      tags: ["login"]
      summary: Logs in the user 
      description: |-
        If the user does not exist, it will be created, and returned 
        If the user exists, is returned.

      requestBody:
        description: Nickname
        required: true 
        content:
          application/json: 
            schema: {$ref: "#/components/schemas/Complete_user"}
       
      responses:

        '201':
          description: User CREATED; sing-up action and returned the content 
          content:
            application/json: 
              schema: {$ref: "#/components/schemas/Complete_user"}        
        "200":
          description: User log-in action, returned the content.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Complete_user' }
        
        "400":
          description: Invalid JSON object or invalid username.

        "500":
          # Internal Server Error
          $ref: '#/components/responses/Server_error'



  /set: 
    put: 
      operationId: setMyUserName
      tags: [set]
      summary: "Property of the user of modifying the nickname" 
      description: "Modify it's own nickname"
      requestBody:
        required: true 
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Complete_user" }

      responses:
        "200":
          description: Nickname updated succesfully, returned the content 
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Complete_user' }

        "400":
          description: invalid object 

        '401':
          $ref: "#/components/responses/Unauthorized"
          
        '500': 
          $ref: "#/components/responses/Server_error" 



  /users/{userid}/: 
    parameters:
      - $ref: '#/components/parameters/user_id'
    
    get:
      operationId: getUserProfile
      tags: [user]   
      summary: get user profile 
      description:  get user profile by the unique identifier

      responses:
        "200":
          description: profile retrieved correctly 
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Complete_profile"}

        "400":  
          description: invalide identifier or not found a match 
        
        '401':
          $ref: "#/components/responses/Unauthorized"
          
        '500': 
          $ref: "#/components/responses/Server_error"



  /users/: 
    get:
      operationId: searchNickname 
      tags: [user]
      summary : Look for another user through the nickname 
      description: A user can search other user profiles via nickname if he/she is not banned and the desidered profile is returned 
      
      parameters :
        - name: nickname
          in: query
          required: true 
          description: nickname
          schema: { $ref: "#/components/schemas/Nickname"}

      responses:
        "200":
          description: the nickname is founded and the matching profiles are retrieved 
          content:  
            application/json:
              schema:
                description: list of matching nicknames
                type: array
                minItems: 0
                maxItems: 99
                items: { $ref: '#/components/schemas/Complete_user' }      
        '401':
          $ref: "#/components/responses/Unauthorized"
          
        '500': 
          $ref: "#/components/responses/Server_error"



  /user/{nickname}:
    parameters:
      - $ref: "#/components/parameters/nickname"

    get:
      operationId: getIDuser
      tags: [user]
      summary: retriving user ID 
      description: retriving user ID through nickname as parameter 
      responses:
        "200":
          description: ID retrieved correctly
          content:
            text/plain: #is just a simple number as a response not a complex structure 
              schema: { $ref: '#/components/schemas/User_login'}
        
        "400":
          description: bad request

        '401':
          $ref: "#/components/responses/Unauthorized"
          
        '500': 
          $ref: "#/components/responses/Server_error"
   


  /banned/{userid}: 
    parameters:
      - $ref: "#/components/parameters/user_id"

        
    put:
      operationId: banUser
      tags: [ban]
      summary: User to be banned 
      description: ban a user
      
      responses:
        "204":
          description: User banned other user

        "400":
          description: bad request 
      
        '401':
          $ref: "#/components/responses/Unauthorized"
          
        '500': 
          $ref: "#/components/responses/Server_error"
         
         
    delete:
      operationId: unbanUser
      tags: [ban]
      summary:  User is no longer banned 
      description: no longer banned 
      
      
      responses:
        "204":
          description: User unbanned other user.

        "400":
          description: bad request 

        '401':
          $ref: "#/components/responses/Unauthorized"
          
        '500': 
          $ref: "#/components/responses/Server_error"



          
  /following/{userid}: 
    parameters:
      - $ref: "#/components/parameters/user_id"  
        
    put:
      operationId: followUser
      tags: [following]
      summary: "follow another user"
      description: "a single user ( that is not banned ) decide to foolow another user" 
      
      
      responses:

        "204":
          description: User started followin other user.

        "400":
          description: bad request 

        '401':
          $ref: "#/components/responses/Unauthorized"

        '403':
          $ref: '#/components/responses/Forbidden'
          
        '500': 
          $ref: "#/components/responses/Server_error"
      
        
    delete:
      operationId: unfollowUser
      tags: [following]
      summary: "unfollowing a peculiar user"
      description: "a user decides to stop following another user"
      
      responses:

        '204':
          description: user unfollowed someone correctly 

        "400":
          description: bad request
        
        '401':
          $ref: "#/components/responses/Unauthorized"
          
        '500': 
          $ref: "#/components/responses/Server_error"
 


  /users/{userid}/followers/: 
    parameters:
     - $ref: '#/components/parameters/user_id'

    get:
      operationId: getFollowersList
      tags: [list]
      summary: get user followers
      description: Get the list of followers for a user.
      responses:
        "200":
          # OK
          description: List of user followers retrieved successfully.
          content:
            application/json:
              schema:
                description: Users list.
                type: array
                minItems: 0
                maxItems: 99
                items: { $ref: '#/components/schemas/Complete_user' }
        "400":
          description: bad request 
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/Server_error'



  /users/{userid}/followings/  :
    parameters:
      - $ref: '#/components/parameters/user_id'

    get:
      operationId: getFollowingsList
      tags: [list]
      summary: get user followings
      description: Get the list of users that a user is following.
      responses:
        "200":
          description: List of user followings retrieved successfully.
          content:
            application/json:
              schema:
                description: Users list.
                type: array
                minItems: 0
                maxItems: 99
                items: { $ref: '#/components/schemas/Complete_user' }
        "400":
          description: bad request 

        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/Server_error'




  /home_page: ###OKAY 
      
    get:
      operationId: getMyStream
      tags: [home page]
      summary: stream of photos by user ID 
      description: get the stream of photo of an logged in user 
    
      responses :
        '200': 
          description: stream retrieved correctly
          content:
            application/json:
              schema:
                description: photo list 
                type: array
                minItems: 0
                maxItems: 99
                items: { $ref: '#/components/schemas/Photo'}
        
        '401':
          $ref: "#/components/responses/Unauthorized"
          
        '500': 
          $ref: "#/components/responses/Server_error"


  /photos/: ####!!!!!!!!

    post:
      operationId: uploadPhoto
      tags: [photo]
      summary: uploading pic 
      description: user uploading a speicifc photo
      requestBody:
        description: image 
        required: true 
        content:
          image/*:
            schema: { $ref: '#/components/schemas/Raw_photo'}
      
      responses:
        "201":
          description: Photo successfully uploaded.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Photo' }

        "400":
          description: Invalid binary data or; binary data not png/jpg.

        "401":
          $ref: '#/components/responses/Unauthorized'

        "500":
          $ref: '#/components/responses/Server_error'



  /photos/{photoid}/ : 
    parameters:
      - $ref: '#/components/parameters/photo_id'
      
      
    delete:
      operationId: deletePhoto
      tags: [photo]
      summary: delete a pic
      description: user deletes its photo from the stream along with likes and comments 
      responses:
        "204":
          description: User deleted photo.

        "400":
          description: Invalid identifier parameter

        "401":
          $ref: '#/components/responses/Unauthorized'

        "403":
          description:  user not author of photo.

        "500":
          $ref: '#/components/responses/Server_error'





  /photos/{photoid}/comments/: 
    parameters:
      - $ref: '#/components/parameters/photo_id'
    
    post:
      operationId: commentPhoto
      tags: [comment]
      summary: "posting a comment"
      description: a user posts a comment below the photo specified as parameter
      
      requestBody:
        description: "contains the photo id where the comment is placed"
        required: true 
        content:
            text/plain:
              schema: {$ref: "#/components/schemas/Comment_text"}      
        
      responses:
        '201':
          description: creation of the comment successful
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Comment'}

        '400':
          description: bad request, invalid parameter 
          
        '401':
          $ref: "#/components/responses/Unauthorized"
          
        '500': 
          $ref: "#/components/responses/Server_error"



  /photos/{photoid}/comments/{commentid}: 
    parameters:
      - $ref: '#/components/parameters/photo_id'
      - $ref: '#/components/parameters/comment_id'
    
    delete:
      operationId: uncommentPhoto
      tags: [comment]
      summary: "deleting a comment"
      description: removing a comment from a specific post
      
      
      responses:
        "204":
          description: Comment successfully removed from the specified photo.
        "400":
          description: bad request 

        '401':
          $ref: "#/components/responses/Unauthorized"
          
        '403': 
          description: requesting user not author of comment 
          
        '500': 
          $ref: "#/components/responses/Server_error"



  /like/{photoid}: 
    parameters:
      - $ref: '#/components/parameters/photo_id'

    
    put: 
      operationId: likePhoto
      tags: [like]
      summary: "put a like"
      description: through the identifier of a pic I put a like 
      
      responses:

        "204":
          description: The like has been put to the specified photo.

        "400":
          description: invalid parameter

        '401':
          $ref: "#/components/responses/Unauthorized"
          
        '500': 
          $ref: "#/components/responses/Server_error"
    
    delete:
      operationId: unlikePhoto
      tags: [like]
      summary: "unlike a photo" 
      description: "user delete a like from a photo"
      
  
      responses: 
        "204":
          description: The like has been removed from the specified photo.

        "400":
          description: invalid parameter

        '401':
          $ref: "#/components/responses/Unauthorized"
          
        '404': 
          $ref: "#/components/responses/Not_found"
          
        '500': 
          $ref: "#/components/responses/Server_error"

 

  /users/{userid}/photos/: 

    parameters:
      - $ref: "#/components/parameters/user_id"

    get:
      operationId: getPhotosList
      tags: [list]
      summary: get user photos
      description: Get the list of photos uploaded by a user.
      responses:
        "200":
          # OK
          description: List of user photos retrieved successfully.
          content:
            application/json:
              schema:
                description: Photos list.
                type: array
                minItems: 0
                maxItems: 99
                items: { $ref: '#/components/schemas/Photo' }
        "400":
          # Bad Request
          description: |-
            Invalid path parameter uid or;
            uid not matching any existing user.
        "401":
          # Unauthorized
          $ref: '#/components/responses/Unauthorized'
        "403":
          # Forbidden
          $ref: '#/components/responses/Forbidden'
        "500":
          # Internal Server Error
          $ref: '#/components/responses/Server_error'

     
components :

  securitySchemes:
      bearerAuth:            
        type: http
        scheme: bearer
        bearerFormat: JWT

    
      
#################################
     

  parameters: 

      user_id:
        name: userid 
        in: path 
        required: true
        description: identifier of the user 
        schema:
          $ref: "#/components/schemas/User_login"

      photo_id:
        name: photoid
        in: path 
        required: true
        description: identifier of the photo
        schema:
          $ref: "#/components/schemas/Photo_id"

      nickname:
        name: nickname 
        in: path
        required: true 
        description: nickname of a specific user_id 
        schema:
          $ref: "#/components/schemas/Nickname"
             
      comment_id:
        name: commentid
        in: path
        required: true
        description: comment identifier 
        schema:
          $ref: "#/components/schemas/Comment_identifier"

           
#################################    
     
  schemas:

      User_login: # USER_ID 
        description: Identifier sent by user during the login
        readOnly: true 
        type: number  
        format: uint64
        example: 24

      Nickname: # USERNAME 
        description: Username 
        type: string 
        pattern: '^.*?$'
        minLength: 3
        maxLength: 16
        example: "Annafabulous"

      Complete_user: #USER 
        description: Everything you know about a user ID and Nickname
        type: object 
        properties:
              user_login:
                $ref: "#/components/schemas/User_login"   
              nickname: 
                $ref: "#/components/schemas/Nickname"   
      
      Photo_id: #PHOTOID
        description: unique identifier of a picture
        readOnly: True 
        type: number 
        format: uint64
        example: 145

      Comment_identifier: #COMMENTID
        description: identifier of the comment 
        readOnly: true 
        type: number
        format: uint64

      Date:
        description: realease date of a comment or a pic 
        type: string
        format: date-time
        minLength: 19
        maxLength: 19

      Raw_photo: #BINARYIMAGE
        description: Image encoding 
        type: string
        minLength: 4
        maxLength: 65535
        format: binary 

      Comment_text:
            description: text of the comment 
            type: string
            pattern: '^.*?$'
            minLength: 1
            maxLength: 2200
            example: nice pic 
            
      Comment: 
        description: comment of a specific User on a specific Photo 
        type: object 
        properties: 
          user_id:
            $ref: "#/components/schemas/User_login"             
          nickname: 
            $ref: "#/components/schemas/Nickname" 
          comment_id:
            $ref: "#/components/schemas/Comment_identifier"  
          photo_id:
            $ref: "#/components/schemas/Photo_id"
          text:
            $ref: "#/components/schemas/Comment_text" 
          date:
            $ref: "#/components/schemas/Date"
             
      Photo:
        description: Contains Everything of a photo
        type: object
        properties:
          photo_id:
            $ref: "#/components/schemas/Photo_id"
          owner:
            $ref: "#/components/schemas/User_login"
          format:
            description: the format of the photo 
            type: string 
            enum:
              - png
              - jpg 
            pattern: '^.*?$'
            minLength: 3
            maxLength: 3  
          comments:
            description: array of comments in a single photo
            type: array 
            minItems: 0
            maxItems: 99
            items: {$ref: "#/components/schemas/Comment" }                      
          likes: 
            description: array of users that liked the picture 
            type: array 
            minItems: 0
            maxItems: 99
            items: { $ref: "#/components/schemas/Complete_user" }                     
          date:
            $ref: "#/components/schemas/Date"
                                         
      Complete_profile: #PROFILE 
        description: Object containing all the profile info
        type: object
        properties:

          nickname: 
            $ref: "#/components/schemas/Nickname"
          
          #mi piacerebbe metter che invece del numero di foto ---> mettere numero likes 
          likesCount:
            description: total number of likes for all its pictures 
            type: number 
            format: uint64 

          #ce lo metto per sicurezza  
          photosCount:
            description: Total number of photos.
            type: number
            format: uint64

          followersCount:
            description: Total number of followers.
            type: number
            format: uint64
            example: 53
          
          followingCount:
            description: Total number of following.
            type: number
            format: uint64
            example: 53
          
          isItMe:
            description: Is it me.
            type: boolean
            example: true
          
          doIFollowUser:
            description: Do I follow user.
            type: boolean
            example: true

          inBannedList:
            description: user is in the banned list 
            type: boolean

          meBanned:
            description: I am in the Banned list of a user 
            type: boolean 

                    ##### aggiunta mia: nel profilo compelto voglio far vedere anche le foto 
          
#################################    

  responses : 
                
      Unauthorized:
        description: "The user is not logged in"   
 

      Not_found:
        description: User not found
        
      Server_error:
        description: Server error
      
      Forbidden:
        description: user in banned list
      
      Profile:
        description: info of the user profile
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Complete_profile"
      

security:
  - bearerAuth: []


